version: 2.1

executors:
  test-executor:
    machine:
      image: ubuntu-1604:202004-01
    resource_class: xlarge

commands:
  install_rust:
    description: Install Rust Toolchain
    steps:
      - run:
          name: Install Rust Toolchain
          command: |
            curl -O https://static.rust-lang.org/rustup/dist/x86_64-unknown-linux-gnu/rustup-init && \
            chmod +x rustup-init && \
            ./rustup-init -y --no-modify-path --default-toolchain stable && \
            rm rustup-init && \
            echo 'export PATH=$HOME/.cargo/bin:$PATH' >> $BASH_ENV && \
            source $BASH_ENV
            rustc --version && \
            cargo --version \
  rust_setup:
    description: Set rustc version
    steps:
      - run:
          name: Set rustc version
          command: |
            rustup default stable
            rustup update stable
  print_versions:
    description: Version Info
    steps:
      - run:
          name: Version Info
          command: rustc --version; cargo --version; rustup --version
  env_setup:
    description: Environment Setup
    steps:
      - run:
          name: Setup Env
          command: |
            echo 'export TAG=0.1.${CIRCLE_BUILD_NUM}' >> $BASH_ENV
            echo 'export IMAGE_NAME=forest' >> $BASH_ENV
            echo 'export CARGO_INCREMENTAL=0' >> $BASH_ENV
            echo 'export CI_TIMEOUT="timeout 40m"' >> $BASH_ENV
            echo 'export CC=gcc' >> $BASH_ENV
  install_deps:
    steps:
      - run:
          name: Install Dependencies
          command: |
            sudo apt-get update
            sudo apt-get install -y clang  \
                curl file gcc g++ git make openssh-client \
                autoconf automake cmake libtool libcurl4-openssl-dev libssl-dev \
                libelf-dev libdw-dev binutils-dev zlib1g-dev libiberty-dev wget \
                xz-utils pkg-config python clang ocl-icd-opencl-dev libgflags-dev libhwloc-dev
            rustup component add clippy rustfmt
            git submodule update --init

          # TODO enable when protoc used again
          # PROTOC_ZIP=protoc-3.7.1-linux-x86_64.zip
          # curl -OL https://github.com/protocolbuffers/protobuf/releases/download/v3.7.1/$PROTOC_ZIP
          # sudo unzip -o $PROTOC_ZIP -d /usr/local bin/protoc
          # sudo unzip -o $PROTOC_ZIP -d /usr/local 'include/*'
          # rm -f $PROTOC_ZIP
  save_cargo_package_cache:
    description: Save cargo package cache for subsequent jobs
    steps:
      - save_cache:
          key: cargo-package-cache-{{ checksum "Cargo.lock" }}
          # paths are relative to /home/circleci/project/
          paths:
            - ../.cargo/git
            - ../.cargo/registry
            - ../.cargo/.package-cache
  restore_cargo_package_cache:
    description: Restore Cargo package cache from prev job
    steps:
      - run:
          name: Print dir
          command: |
            ls -all /usr/local/include
      - restore_cache:
          key: cargo-package-cache-{{ checksum "Cargo.lock" }}
      - run:
          name: Check cargo package cache
          command: |
            ls -all $HOME/.cargo
            du -ssh $HOME/.cargo
  build_setup:
    description: Sets up environment for future jobs
    steps:
      - checkout
      - install_rust
      - rust_setup
      - print_versions
      - env_setup
      - install_deps
jobs:
  prefetch-crates:
    executor: test-executor
    description: Prefetch cargo crates for subsequent jobs.
    steps:
      - build_setup
      - restore_cargo_package_cache
      - run:
          name: Fetch workspace dependencies over network
          command: cargo fetch
      - save_cargo_package_cache
  nightly-build-check:
    executor: test-executor
    description: Check nightly build
    steps:
      - build_setup
      - restore_cargo_package_cache
      - run:
          name: Nightly Build
          command: |
            rustup run nightly rustc --version --verbose
            rustup run nightly cargo --version --verbose
            rustup run nightly cargo build
  lint:
    executor: test-executor
    description: Run Rust linting tools.
    steps:
      - build_setup
      - restore_cargo_package_cache
      - run:
          name: cargo clippy
          command: cargo clippy -- -D warnings
      - run:
          name: cargo fmt
          command: cargo fmt --all -- --check
  test:
    executor: test-executor
    description: Run Rust tests
    steps:
      - build_setup
      - restore_cargo_package_cache
      - run:
          name: Run Unit Tests
          command: make test
  test-vectors:
    executor: test-executor
    description: Run serialization and conformance tests
    steps:
      - build_setup
      - restore_cargo_package_cache
      - run:
          name: Run test vectors
          command: make run-vectors
  # cov:
  #   machine: true
  #   steps:
  #     - checkout
  #     - run:
  #         name: Pull xd009642/tarpaulin
  #         command: docker pull xd009642/tarpaulin:latest
  #     - run:
  #         name: Generate report
  #         command: >
  #           docker run --security-opt seccomp=unconfined -e CODECOV_TOKEN=${CODECOV_TOKEN}
  #           -v $PWD:/volume xd009642/tarpaulin cargo tarpaulin -v --ciserver circle-ci
  #           --out Xml --all-features
  #     - run:
  #         name: Upload
  #         command: bash <(curl -s https://codecov.io/bash) -Z -f cobertura.xml
  coverage:
    executor: test-executor
    description: Run Rust tests
    environment:
      GRCOVFLAGS: -s . --llvm --branch --ignore-not-existing --ignore "/*"
    steps:
      - build_setup
      - restore_cargo_package_cache
      - run:
          name: Build tests with coverage
          command: CARGO_INCREMENTAL=0 RUSTFLAGS="$COVFLAGS" cargo +$NIGHTLY t --no-run --all-features
      - run:
          name: Run tests
          command: |
            # TODO: Store test results in json `--format json`
            # TODO: Fix coverage on zkp-macros-lib
            # TODO: Enable --nocapture
            CARGO_INCREMENTAL=0 RUSTFLAGS="$COVFLAGS" cargo +$NIGHTLY t --workspace
            rustup run nightly cargo +$NIGHTLY t --package
      - run:
          name: Combine coverage
          command: |
            zip -0 target/ccov.zip `find . \( -name "*.gc*" \) -print`
            grcov target/ccov.zip $GRCOVFLAGS -t lcov -o target/lcov.info
      - run:
          name: Submit to codecov
          command: |
            bash <(curl -s https://codecov.io/bash)
  install:
    executor: test-executor
    description: Install forest binary
    steps:
      - build_setup
      - restore_cargo_package_cache
      - run:
          name: Install binary
          command: make install
  publish-docs:
    executor: test-executor
    description: Publish documentation to GitHub pages
    steps:
      - build_setup
      - restore_cargo_package_cache
      - run:
          name: Build Docs
          command: cargo doc --no-deps --all-features
      - run:
          name: Publish Docs
          command: bash ./scripts/build-rust-docs.sh

workflows:
  setup_test:
    jobs:
      - prefetch-crates
      - lint:
          requires:
            - prefetch-crates
      - test:
          requires:
            - prefetch-crates
      - test-vectors:
          requires:
            - prefetch-crates
  docs:
    jobs:
      - publish-docs
  coverage:
    jobs:
      - coverage
